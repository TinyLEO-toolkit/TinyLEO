"""
TinyLEO Network Simulation with Optional Tests

This script demonstrates the usage of the TinyLEO toolkit for simulating 
a satellite network environment. It provides an option to include or exclude 
network tests such as ping, iperf, and traceroute.

Usage:
------
1. Set the `TEST` variable to `True` to enable automated network testing 
   (e.g., ping, iperf, traceroute).
2. Set the `TEST` variable to `False` to disable automated tests and focus 
   solely on simulation setup and topology updates.
3. Run this script to simulate the satellite network environment.

Note:
-----
- When `TEST = True`, the script will perform automated network tests 
  during the simulation.
- When `TEST = False`, the script will only set up the simulation environment 
  and update the topology. Users can manually perform tests inside the 
  containers using the commands generated by `get_container.py`.

Example:
--------
To access a container, use the command generated by `get_container.py`:
`nsenter -m -u -i -n -p -t <PID> bash`

Replace `<PID>` with the actual process ID of the container.
"""

import os
import sys
os.environ["GRPC_VERBOSITY"] = "ERROR"
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from southbound.sn_controller import *
from sn_orchestrator_mpc import *

TEST = True
# Define ground station (GS) latitude and longitude coordinates
GS_lat_long = [[32,-12], [-5.11,-56.39],[64, 94]]

# Define ground station (GS) cell positions in the grid
GS_cell = [[4,6],[7,4],[2,9]]

# Path to the configuration file
configuration_file_path = "config/tinyleo_config.json"
print('Start Tinyleo...\n')
# Initialize the southbound controller
sn = RemoteController(configuration_file_path,GS_lat_long,GS_cell)
# Initialize the simulation environment, create nodes and links
sn.init_remote_machine()
# Create nodes (e.g., satellites and ground stations) in the simulation
sn.create_nodes()
# Create links (e.g., inter-satellite and ground station links) in the simulation
sn.create_links()
# Create a link failure server to handle link failures
sn.start_link_faliure_server()
# Update the simulation with the initial topology
sn.update_tinyleo_topology(0)
# Deploy the SRv6 agent in satellite and ground stations
sn.deploy_tinyleo_srv6_agent()
# Wait for the SRv6 agent to initialize
time.sleep(10)

# Define the time interval for topology updates
update_time = 20

# Loop through each timestamp in the simulation duration
for timestamp in range(0, sn.duration):
    start_time = time.time()
    if timestamp != 0:
        sn.update_tinyleo_topology(timestamp)
    if TEST:
        time.sleep(2)
        sn.set_traceroute("GS1", "GS2",f"ts{timestamp}")
    if timestamp == 0:
        if TEST:
            time.sleep(1)
            sn.set_traceroute("GS1", "GS2",f"ts{timestamp}_before_link_failure")
            sn.set_ping("GS1", "GS2", f"ts{timestamp}_when_link_failure")
            sn.set_iperf("GS1", "GS2", f"ts{timestamp}_when_link_failure")
            time.sleep(1)
            sn.tinyleo_fault_test()
            time.sleep(2)
            sn.set_traceroute("GS1", "GS2",f"ts{timestamp}_after_link_failure")
            time.sleep(update_time-0.5 - (time.time() - start_time))
            if timestamp != sn.duration - 1:
                sn.set_ping("GS1", "GS2", f"ts{timestamp}-{timestamp+1}_topo_change")
                sn.set_iperf("GS1", "GS2", f"ts{timestamp}-{timestamp+1}_topo_change")
    time.sleep(update_time - (time.time() - start_time))

if input('clear environment?[y/n]').strip().lower()[:1] == 'y':
    sn.clean()